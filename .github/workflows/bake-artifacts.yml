name: "Build Artifacts"
run-name: >
  Build by @${{ github.actor }} with ${{ github.event_name }}

on:
  repository_dispatch:
    types: [event-bake-artifacts]

env:
  BUILD_REPOSITORY: "diverger/armbian-build"
  BUILD_REF: ${{ github.event.client_payload.armbian_ref || 'armbian' }}
  USERPATCHES_REPOSITORY: "diverger/armbian-os"
  USERPATCHES_REF: ${{ github.event.client_payload.armbian_os_ref || 'diverger' }}
  USERPATCHES_DIR: "userpatches"
  BUILD_ARGS: "${{ github.event.client_payload.build_args }}"
  BUILD_PARAMS: "${{ github.event.client_payload.build_params }}"
  CUSTOM_REP: "diverger/armbian-custom"
  CUSTOM_REF: ${{ github.event.client_payload.custom_ref || 'main' }}
  GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
  GHCR_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
jobs:
  build-artifacts:
    name: "Build Artifacts"
    runs-on: ${{ github.event.client_payload.runner || 'ubuntu-latest' }}
    timeout-minutes: 480

    steps:
      # Free up disk space to avoid running out of space during builds
    #   - name: Get more disk space
    #     uses: jlumbroso/free-disk-space@main
    #     with:
    #       tool-cache: false
    #       android: true
    #       dotnet: true
    #       haskell: true
    #       large-packages: true
    #       swap-storage: true
    #       docker-images: true

      # Additional manual cleanup for more space
      - name: Additional disk cleanup
        run: |
          echo "Disk usage before cleanup:"
          df -h

          # Remove additional packages and caches
          sudo apt-get autoremove -y
          sudo apt-get autoclean
          sudo apt-get clean

          # Remove some additional large directories if they exist
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL || true
          sudo rm -rf /usr/local/share/boost /usr/local/share/powershell || true
          sudo rm -rf /usr/share/swift /usr/local/.ghcup || true

          # Clear npm cache
          npm cache clean --force 2>/dev/null || true

          # Clear pip cache
          pip cache purge 2>/dev/null || true

          echo "Disk usage after cleanup:"
          df -h

      # Login to container registry
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ env.BUILD_REF }}
          fetch-depth: 0
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v5
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          token: ${{ env.GH_TOKEN }}
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: 0
          clean: false
          path: userpatches.repo

      - name: "Checkout customizations"
        if: ${{ ( env.CUSTOM_REP != '' ) && ( env.CUSTOM_REF != '' ) }}
        uses: actions/checkout@v5
        with:
          repository: ${{ env.CUSTOM_REP }}
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rsync -av custom/userpatches/. userpatches/
          rm -rf userpatches.repo && rm -rf custom

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # Build artifacts with extra parameters if provided
      - name: Build artifacts
        run: |
          # Add any extra parameters to the build
          export ${{ env.BUILD_PARAMS }}

          # Build artifacts (customize this command based on your needs)
          bash ./compile.sh  \
            GIT_TOKEN=${{ env.GH_TOKEN }} \
            GHCR_TOKEN=${{ env.GHCR_TOKEN }} \
            ${{ env.BUILD_ARGS }}

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: armbian-artifacts-${{ github.run_id }}
          path: |
            output/**.dtb
            output/**.dtbo
            output/debs/**
            output/images/**
          retention-days: 30
          compression-level: 6

      # Show final disk usage
      - name: Show final disk usage
        if: always()
        run: |
          echo "Final disk usage:"
          df -h
          echo "Directory sizes in /home/runner/work:"
          du -sh /home/runner/work/* 2>/dev/null || true


